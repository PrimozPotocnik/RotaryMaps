This is a short description of the Magma code that imports the database of all rotary maps (fully regular on orientable and non-orientable surfaces as well as chiral) with at least 2 and at most 3000 edges (up to 6000 edges in the fully regular orientable case). The package also includes a description of the magma code that imports the list of all groups of order up to 12000 that can be generated by an involution and one other element, together with all such generating pairs (the so called 2*-groups and 2*-pairs).

//
// Two Star Groups and pairs
//

* load "ImportTwoStarGroups.mgm";

  Requires also: TwoStarPairs12kplaces.txt and TwoStarPairs12k.txt

  A $2^*$-group is a group $G$ generated by two elements, $x$ and $g$, such that x is an involution and $g$ is an arbitrary element (possibly trivial or equal to $x$). The pair $(x,g)$ is then called a $2^*$-pair. Upon loading the file "ImportTwoStarGroups.mgm" into magma, the following functions become available:

  ** NumberOfTwoStarGroups(n);
 
  Returns the number of $2^*$-groups of order $n$, for $n \le 12000$.

  ** NumberOfTwoStarPairs(n,k);

  For a $k$-th $2^*$-group $G$ of order $n$, returns the number of (isomorphism classes) of $2^*$-pairs $(x,g)$ generating $G$.

  ** TwoStarGroup(n,k);

  Returns the k-th 2* group G of order n as a permutation group.

  ** TwoStarPair(n,k,l);

  Returns the $2^*$-group $G=$TwoStarGroup(n,k) (as permutation group), generated by $x=G.1$ and $g=G.2$, where $(x,g)$ is the $l$-th $2^*$-pair generating $G$.


//
// Regular maps (orientable and non-orientable) on up to 3000 edges
//

* load "ImportRegularMaps3kE.mgm";

   Requires also: RegularMaps3kE.txt, RegularMaps3kEData.csv, RegularMaps3kEplaces.txt, PolyhedralRegMaps3kE.txt
 
  Imports all fully regular maps (on orientable and on non-orientable surfaces) that have at leat 2 and at most 3000 edges. Upon executing this command, the following functions become available:

 ** NumberOfRegularMaps(m)

    Returns the number of fully regular maps (orientable and non-orientable) with $m$ edges.

 ** RegularMap(m,k);

    Returns the $k$-th regular maps on $m$ edges ($1 \le k \le$NumberOfRegularMaps(m)). More precisely, the magma command G<a,b,c>:=RegularMap(m,k);
    returns a finitely presented group $G$ with involutory generators $a,b$ and $c$ s.t. $a$ and  $c$ commute, and where $ab$ corresponds to a one-step rotation of a face and $bc$ to a one-step rotation around an incident vertex.

 ** FPToPermMapABC(G);

    Given a group (map) G generated by a, b, and c, returns the permutation group P isomorphic to G generated by the images of a,b, and c in P.

 ** IsOrientableRegularMap(m,k);

    Returns true or false depending on whether RegularMap(m,k) is oriantable.

 ** GenusOfRegularMap(m,k);
 
    Returns the genus of RegularMap(m,k). 

 ** TypeOfRegularMap(m,k);

    Returns the triple $[p,q,r]$ where $p$ is the face-length, $q$ is the valence, and $r$ is the length of the Petrie walk of RegularMap(m,k).

 ** NumberOfVerticesOfRegularMap(m,k);

    Returns the number of vertices of RegularMap(m,k).

 ** NumberOfFacesOfRegularMap(m,k);

    Returns the number of faces of RegularMap(m,k).

 ** MultiplicityOfRegularMap(m,k);
 
    Returns a pair $[m_V,m_F]$ where $m_V$ is the number of parallel edges between two adjacent vertices and $m_F$ is the number of edges shared by two adjacent faces.

 ** StabilityOfRegularMap(m,k);

    Returns a string that indicates which non-trivial Wilson operators the map RegularMap(m,k) is invariant under. These strings are: "none", "Du", "Pe", "Op", "Tr+iT", and "Du+Pe+Op+Tr+iT". Here Du refers to the dual operator, Pe refers to the Petrie operator, Op refers to the opposite (the composition of the Petrie, Dual and Petrie, in that order, which is the same as the composition of the Dual, the Petrie and the Dual, in that order), Tr refers to the Petrie of the Dual, and iTs refers to the inverse of Tr (which is the same as the Daul of the Petrie).

 ** IndexOfExponentGroupOfRegularMap(m,k);

    Returns the index of the subgroup H (called the exponent group of the map) of the group of units $U(q)$ that contains all $j$ such that the image under the $j$-th hole operator $H_j$ of RegularMap(m,k) is isomorphic to RegularMap(m,k). This index is then equal to the size of the $<H_j>$-orbit containing RegularMap(m,k).

 ** IsPolyhedralRegularMap(m,k);

    Returns a boolean depending on whether the RegularMap(m,k) is polyhedral or not (a map is polyhedral provided that its skeleton is a simple graph and that every two distinct faces meet in a vertex, an edge, or they don't meet at all).


//
// Chiral (rotary) maps on up to 6000 edges
//

 * load "ImportChiralMaps6kE.mgm";

 Requires also: ChiralMaps3kE.txt, ChiralMaps3kEData.csv, ChirakMaps3kEplaces.txt, PolyhedralChiralMaps6kE.txt


 ** NumberOfChiralMaps(m);

    Returns the number of chiral maps with m edges.

 ** ChiralMap(m,k);

    Returns the $k$-th chiral map on $m$ edges ($1 \le k \le$NumberOfRegularMaps(m)). More precisely, the magma command
    G<R,S>:=ChiralMap(m,k)
    returns a finitely presented group $G$ with generators $R$ and $S$, where $R$ corresponds to the one-step rotataion of a face, and $S$ corresponds to a one-step rotation around an incident vertex.

 ** FPToPermMap(G);

    For a chiral map G=G<R,S>, returns the permutation group P isomorphic to G generated by the corresponding images of R and S in P.

 ** GenusOfChiralMap(m,k);
 
    Returns the genus of ChiralMap(m,k).

 ** TypeOfChiralMap(m,k);

    Returns the triple [p,q,r] where p is the face-length, q is the valency and r is the length of the Petrie walk of ChiralMap(m,k).

 ** NumberOfVerticesOfChiralMap(m,k);

    Returns the number of vertices of ChiralMap(m,k).

 ** NumberOfFacesOfChiralMap(m,k);

    Returns the number of faes of ChiralMap(m,k).

 ** MultiplicityOfChiralMap(m,k);
 
    Returns $[m_V,m_F]$ where $m_V$ is the number of parallel edges between two adjacent vertices and $m_F$ is the number of edges shared by two adjacent faces in ChiralMap(m,k).

 ** StabilityOfChiralMap(m,k);

    Returns a string that indicates under which Wilson operators the map ChiralMap(m,k) is invariant. These strings are: none, Du (the dual), and DuMir (the dual of the mirror).

 ** IndexOfExponentGroupOfChiralMap(m,k);

    Returns the index of the subgroup H (called the exponent group of the map) of the group of units $U(q)$ that contains all $j$ such that the image under the $j$-th hole operator $H_j$ of ChiralMap(m,k) is isomorphic to ChiralMap(m,k). This index is then equal to the size of the $<H_j>$-orbit containing ChiralMap(m,k).

 ** IsPolyhedralChiralMap(m,k);

    Returns a boolean depending on whether the ChiralMap(m,k) is polyhedral or not (a map is polyhedral provided that its skeleton is a simple graph and that every two distinct faces meet in a vertex, an edge, or they don't meet at all).

//
// Large Orienatble regular (reflexible) maps with the number of edges between 3001 and 6000.
//

 * load "ImportLargeRegularOrientedMaps.mgm";

   Requires also: LargeORMdata.csv, ORM2star.txt, ImportTwoStarGroups.mgm

  ** NumberOfOrientableRegularMaps(m);

   Returns the number of regular orientable maps with m edges, for $3001 \le m \le 6000$. If $m\le 3000$, the returned value will be 0.
 
  ** OrientableRegularMap(m,k);

   Returns the orientation preserving group of the $k$-th regular orientable map G:=OrientableRegularMap(m,k) on m edges, as a permutation group generated by the one-step face-rotation $R:=G.1$, and one-step rotation around an incident vertex $S:=G.2$. 

  ** GenusOfOrientableRegularMap(m,k);

   Returns the genus of OrientableRegularMap(m,k).

  ** TypeOfOrientableRegularMap(m,k);

    Returns the triple $[p,q,r]$, where $p$ is the face-length, $q$ is the valency, and $r$ is the length of the Petrie walk of OrientableRegularMap(m,k).

 ** NumberOfVerticesOfOrientableRegularMap(m,k);

    Returns the number of vertices of OrientableRegularMap(m,k).

 ** NumberOfFacesOfOrientableRegularMap(m,k);

    Returns the number of faces of OrientableRegularMap(m,k).

 ** MultiplicityOfOrientableRegularMap(m,k);

    Returns $[m_V,m_F]$ where $m_V$ is the number of parallel edges between two adjacent vertices of OrientableRegularMap(m,k) and mF is the number of edges shared by two adjacent faces.

 ** RStoABC(G);
  
    For $G:=$OrientableRegularMap(m,k), returns the permutation group $X$ generated by involutions $a:=X.1$, $b:=X.2$, and $c:=X.3$ where $<ab,bc>$ is isomorphic to $G$ via isomorphism mapping a*b to G.1 and b*c to G.2 and such that a and c commute. That is, $X=X<a,b,c>$ is the automorphism group of a regular orientable map whose rotation group is $G$.

//
// Skeletons of rotary maps
//

 * load "ImportSkeletons.mgm";

   Requires also: Skeletons-3000.txt, SPSkeletons-3000.txt

   Builds two double sequences, Sk and PlhSk. The first contains the simplifications of all the graphs on up to 3000 edges that embed as rotary maps. The second contains all the graphs on up to 3000 edges that embed as polyhedral rotary maps (intersection of two faces is either empty, a vertex or an edge). Sk[n,k] returns the $k$-th graph on $n$ vertices. Similarly for the PlSk[n,k].

